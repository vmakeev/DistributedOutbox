// <auto-generated/>
using DistributedOutbox.Postgres;
using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace DistributedOutbox.Postgres.Queries
{
    // ReSharper disable once PartialTypeWithSinglePart
    public partial class AddEventsQuery
    {
        protected struct NumberedParameterInfo
        {
            /// <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
            public NumberedParameterInfo(string dbName, string semanticName)
            {
                DbName = dbName;
                SemanticName = semanticName;
            }

            public string DbName { get; }
            public string SemanticName { get; }
        }

        private const string BalancedParenthesisRegexPattern = @"values[^\(]*(?<valueTemplate>\([^\(\)]*(((?<Open>\()[^\(\)]*)+((?<Close-Open>\))[^\(\)]*)+)*(?(Open)(?!))\))";
        private const RegexOptions BalancedParenthesisRegexOptions = RegexOptions.CultureInvariant | RegexOptions.Compiled | RegexOptions.IgnoreCase;
        private const string NumberedValueRegexPattern = @"\@(?<dbName>(?<semanticName>[a-zA-Z0-9_]+)_N)";
        private const RegexOptions NumberedValueRegexOptions = RegexOptions.CultureInvariant | RegexOptions.Compiled | RegexOptions.IgnoreCase;

        private string _cachedSql;
        private readonly object _cachedSqlLocker = new object();
        protected static string _cachedQueryTemplate;
        protected static string _cachedValuesTemplate;
        protected static readonly object _queryTemplatesLocker = new object();
        protected static readonly Regex _balancedParenthesisRegex = new Regex(BalancedParenthesisRegexPattern, BalancedParenthesisRegexOptions);
        protected static readonly Regex _numberedValueRegex = new Regex(NumberedValueRegexPattern, NumberedValueRegexOptions);

        /// <summary>
        /// Заготовка для определенной пользователем пост-обработки текста запроса
        /// </summary>
        /// <param name="queryText">Текст кэшированного sql-запроса</param>
        partial void ProcessCachedSql(ref string queryText);

        /// <summary>
        /// Возвращает текст запроса
        /// </summary>
        /// <returns>Текст запроса</returns>
        protected virtual string GetQueryText()
        {
            if (_cachedSql == null)
            {
                lock (_cachedSqlLocker)
                {
                    using (Stream stream = typeof(AddEventsQuery).Assembly.GetManifestResourceStream("DistributedOutbox.Postgres.Queries.AddEventsQuery.sql"))
                    {
                        string sql = new StreamReader(stream ?? throw new InvalidOperationException("Can not get manifest resource stream.")).ReadToEnd();

                        const string sectionRegexPattern = @"--\s*begin\s+[a-zA-Z0-9_]*\s*\r?\n.*?\s*\r?\n\s*--\s*end\s*\r?\n";
                        const RegexOptions regexOptions = RegexOptions.Singleline | RegexOptions.IgnoreCase | RegexOptions.Compiled;
                        sql = Regex.Replace(sql, sectionRegexPattern, string.Empty, regexOptions);

                        _cachedSql = sql;

                        ProcessCachedSql(ref _cachedSql);
                    }
                }
            }

            return _cachedSql;
        }

        private string GetInsertedValuesSection(string query)
        {
            MatchCollection matches = _balancedParenthesisRegex.Matches(query);
            if (matches.Count == 0)
            {
                return null;
            }

            Match last = matches[matches.Count - 1];
            string result = last.Groups["valueTemplate"].Value;
            return result;
        }

        protected virtual IEnumerable<NumberedParameterInfo> GetNumberedParameters(string insertedValuesSection)
        {
            MatchCollection matches = _numberedValueRegex.Matches(insertedValuesSection);
            if (matches.Count == 0)
            {
                yield break;
            }

            foreach (Match match in matches)
            {
                if (match.Success)
                {
                    yield return new NumberedParameterInfo(match.Groups["dbName"].Value, match.Groups["semanticName"].Value);
                }
            }
        }

        protected void GetQueryTemplates(string queryText, out string queryTemplate, out string valuesTemplate)
        {
            if (string.IsNullOrEmpty(_cachedQueryTemplate) || string.IsNullOrEmpty(_cachedValuesTemplate))
            {
                lock (_queryTemplatesLocker)
                {
                    string valuesSection = GetInsertedValuesSection(queryText);
                    if (string.IsNullOrEmpty(valuesSection))
                    {
                        throw new Exception("Unable to find inserted values in query text.");
                    }

                    string queryTemplateLocal = queryText.Replace(valuesSection, "{0}");
                    string valuesTemplateLocal = valuesSection;

                    IEnumerable<NumberedParameterInfo> numberedParameters = GetNumberedParameters(queryText);
                    foreach (NumberedParameterInfo numberedParameter in numberedParameters)
                    {
                        valuesTemplateLocal = valuesTemplateLocal.Replace(numberedParameter.DbName, numberedParameter.SemanticName + "_{0}");
                    }

                    _cachedQueryTemplate = queryTemplateLocal;
                    _cachedValuesTemplate = valuesTemplateLocal;
                }
            }

            queryTemplate = _cachedQueryTemplate;
            valuesTemplate = _cachedValuesTemplate;
        }

        /// <summary>
        /// Возвращает текст запроса для вставки <paramref name="rowsCount" /> записей
        /// </summary>
        /// <param name="rowsCount">Количество записей</param>
        /// <returns>Текст запроса для вставки <paramref name="rowsCount" /> записей</returns>
        private string GetQueryText(int rowsCount)
        {
            GetQueryTemplates(GetQueryText(), out string queryTemplate, out string valuesTemplate);

            if (rowsCount <= 0)
            {
                throw new ArgumentOutOfRangeException(nameof(rowsCount), rowsCount, $"{nameof(rowsCount)} must be greater than zero.");
            }

            IEnumerable<string> rowTemplates = Enumerable.Range(0, rowsCount).Select(index => string.Format(valuesTemplate, index));
            string rowTemplatesString = string.Join($",{Environment.NewLine}", rowTemplates);

            string queryText = string.Format(queryTemplate, rowTemplatesString);
            return queryText;
        }

        /// <summary>
        /// Добавляет параметр к команде
        /// </summary>
        /// <param name="command">Команда SQL</param>
        /// <param name="parameterType">Тип параметра</param>
        /// <param name="parameterName">Имя параметра</param>
        /// <param name="value">Значение параметра</param>
        /// <param name="length">Длина параметра</param>
        protected virtual void AddParameter(IDbCommand command, NpgsqlDbType parameterType, string parameterName, object value, int? length = null)
        {
            var parameter = new NpgsqlParameter
            {
                ParameterName = parameterName,
                NpgsqlDbType = parameterType,
                Value = value ?? DBNull.Value
            };

            if (length.HasValue && length.Value > 0)
            {
                parameter.Size = length.Value;
            }
    
            command.Parameters.Add(parameter);
        }

        /// <summary>
        /// Выполняет добавление строки в таблицу
        /// </summary>
        /// <param name="connection">Подключение к БД</param>
        /// <param name="id">id_N</param>
        /// <param name="sequenceName">sequenceName_N</param>
        /// <param name="type">type_N</param>
        /// <param name="key">key_N</param>
        /// <param name="targets">targets_N</param>
        /// <param name="date">date_N</param>
        /// <param name="metadata">metadata_N</param>
        /// <param name="payload">payload_N</param>
        /// <param name="status">status_N</param>
        /// <param name="cancellationToken">Токен отмены</param>
        /// <returns>Количество обновленных строк</returns>
        public virtual async Task<int> AddAsync(DbConnection connection, long? id, string sequenceName, string type, string key, string targets, DateTime? date, string metadata, string payload, string status, CancellationToken cancellationToken)
        {
            using (DbCommand cmd = connection.CreateCommand())
            {
                cmd.CommandText = GetQueryText();
                AddParameter(cmd, NpgsqlDbType.Bigint, "@id_N", id);
                AddParameter(cmd, NpgsqlDbType.Text, "@sequenceName_N", sequenceName);
                AddParameter(cmd, NpgsqlDbType.Text, "@type_N", type);
                AddParameter(cmd, NpgsqlDbType.Text, "@key_N", key);
                AddParameter(cmd, NpgsqlDbType.Jsonb, "@targets_N", targets);
                AddParameter(cmd, NpgsqlDbType.Timestamp, "@date_N", date);
                AddParameter(cmd, NpgsqlDbType.Jsonb, "@metadata_N", metadata);
                AddParameter(cmd, NpgsqlDbType.Jsonb, "@payload_N", payload);
                AddParameter(cmd, NpgsqlDbType.Text, "@status_N", status);

                PrepareCommand(cmd);
                return await cmd.ExecuteNonQueryAsync(cancellationToken);
            }
        }

        /// <summary>
        /// Выполняет добавление строк в таблицу
        /// </summary>
        /// <param name="connection">Подключение к БД</param>
        /// <param name="items">Добавляемые записи</param>
        /// <param name="cancellationToken">Токен отмены</param>
        /// <returns>Количество добавленных строк</returns>
        public virtual async Task<int> AddAsync(DbConnection connection, ICollection<PostgresOutboxEventRaw> items, CancellationToken cancellationToken)
        {
            using(DbCommand cmd = connection.CreateCommand())
            {
                cmd.CommandText = GetQueryText(items.Count);

                int index = 0;
                foreach(PostgresOutboxEventRaw item in items)
                {
                    AddParameter(cmd, NpgsqlDbType.Bigint, string.Format("@id_{0}", index), item.Id);
                    AddParameter(cmd, NpgsqlDbType.Text, string.Format("@sequenceName_{0}", index), item.SequenceName);
                    AddParameter(cmd, NpgsqlDbType.Text, string.Format("@type_{0}", index), item.Type);
                    AddParameter(cmd, NpgsqlDbType.Text, string.Format("@key_{0}", index), item.Key);
                    AddParameter(cmd, NpgsqlDbType.Jsonb, string.Format("@targets_{0}", index), item.Targets);
                    AddParameter(cmd, NpgsqlDbType.Timestamp, string.Format("@date_{0}", index), item.Date);
                    AddParameter(cmd, NpgsqlDbType.Jsonb, string.Format("@metadata_{0}", index), item.Metadata);
                    AddParameter(cmd, NpgsqlDbType.Jsonb, string.Format("@payload_{0}", index), item.Payload);
                    AddParameter(cmd, NpgsqlDbType.Text, string.Format("@status_{0}", index), item.Status);

                    index++;
                }

                PrepareCommand(cmd);
                return await cmd.ExecuteNonQueryAsync(cancellationToken);
            }
        }

        /// <summary>
        /// Заготовка для определенной пользователем обработки команды перед исполнением
        /// </summary>
        /// <param name="command">Команда</param>
        partial void PrepareCommand(IDbCommand command);
    }
}